using EntityFramework.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UCMS.Entitys;

namespace UCMS.Provider
{
    public class SysNoticeProvider
    {
        UCMSContext db = new UCMSContext();
        public IEnumerable<SysNotice> GetList()
        {
            var query = from a in db.SysNotice
                        where a.IsDelete == (int)Common.EnumModel.EIsDelete.NotDelete
                        select new {
                            a.Id,a.Title,a.NoticeType,a.CreateTime
                        };
            var list = new List<SysNotice>();
            foreach (var item in query)
            {
                list.Add(new SysNotice
                {
                    Id = item.Id,
                    Title = item.Title,
                    NoticeType = item.NoticeType,
                    CreateTime = item.CreateTime
                });
            }
            return list.OrderByDescending(c=>c.NoticeType);
        }
        public SysNotice GetNotice(long Id)
        {
            return db.SysNotice.Where(c => c.IsDelete == (int)Common.EnumModel.EIsDelete.NotDelete&&c.Id==Id).FirstOrDefault();
        }
        public int Edit(SysNotice model)
        {
            if (model.Id == 0)
            {
                model.Id = Common.PrimaryKey.GetHashCodeID;
                model.CreateTime = DateTime.Now;
                db.Set<SysNotice>().Add(model);
            }
            else
            {
                db.Entry<SysNotice>(model).State = System.Data.Entity.EntityState.Modified;
            }
            return db.SaveChanges();
        }
        public int Delete(List<long> ids)
        {
            return db.SysNotice.Where(c => ids.Contains(c.Id)).Update(r => new SysNotice { IsDelete = (int)Common.EnumModel.EIsDelete.NotDelete });
        }
    }
}
